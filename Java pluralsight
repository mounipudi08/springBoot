public class Customer {
  private final String name;
  private CreditCard creditCard;
  public Customer(String name, long ccNumber) {
          this.name = name;
          this.creditCard = new CreditCard(ccNumber);
}
}

class CreditCard {

private final long cardNumber;

CreditCard(long cardNumber) {
this.cardNumber = cardNumber;
}
}

public class Product {

private final String name;
private int price;

public Product(String name, int price) {
this.name = name;
this.price = price;
}

public int getPrice() {
return price;
}

public class ShoppingCart {
  private List<Product> products = new ArrayList<>();
  public void addProduct(Product product) {
  products.add(product);
}

public int getTotalCost() {
return products.stream() 
       .mapToInt(Product::getPrice)  // mapping each one to the price
       .sum();
}

public class Demo {
public static void main(String[] args) {
ShoppingCart cart = new ShoppingCart();
Product toothBrush = new Product("Tooth Brush",3350);
Product babyAlarm = new Product("Baby Alarm", 4999);
cart.addProduct(toothbrush);
cart.addProduct(babyAlarm);
System.out.println(cart.getTotalCost());
}}

public class Demo {
public static void main(String[] args) {
ShoppingCart cart = new ShoppingCart();
//Product toothBrush = new Product("Tooth Brush",3350);
//Product babyAlarm = new Product("Baby Alarm", 4999);
Product toothbrush = Catalogue.getProduct("Electric ToothBrush");
cart.addProduct(toothbrush);
cart.addProduct(babyAlarm);
System.out.println(cart.getTotalCost());
}}

import java.util.Map;
public class Catalogue{
//private static Map<String,Product> productMap = Map.of(
//"Tooth Brush" ,new Product("Tooth Brush",3350) 
//" BABY ALARM" ,new Product('baby Alarm",3350)
//)

private static Map<String,Product> productMap = new HashMap<>();

static{
productMap.put("Tooth Brush" ,new Product("Tooth Brush",3350));
productMap.put(" BABY ALARM" ,new Product('baby Alarm",3350));
}

public static Product getProduct(String ProductName) {
return ProductMap.get(productName);
}
}

Hiding implementation detail
 Especially detail that might impact on the rest of the system

public class Product {
 private ProductType type;
}

private enum ProductType {
  DIFITAL,PHYSICAL;
}

----------------------------------------------------------------------------------

Order -->

public class Order {
private Customer customer;
private ShoppingCart cart;
private Payment payment;

public Order(Customer customer, ShoppingCart cart, Payment payment) {
this.customer = customer;
this.cart = cart;
this.payment = payment;
}

@Override
public String toString() {
return "Order{" +  "\n customer" + customer + "\n cart" + cart + "\payment=" +payment + 
   "\n}";
}
}

Credit card 

public class CreditCard {

private final long cardNumber;
CreditCard(long cardNumber){
this.cardNumber = cardNumber;
}
public Optional<Payment> mkPayment(int value) {
if(Math.random() > 0.3) {
return Optional.of(new Payment(this,value,UUID.randomUUID()));
}else{
return Optional.empty();
}
}

@Override
public String toString() {
return "CreditCard{" + "cardNumber=" + cardNumber + '}';
}}

public class Customer {
private final String name;
private CreditCard creditCard;

public Customer(String name,long ccNumber) {
this.name = name;
this.creditCard = new CreditCard(ccNumber);
}

public Order checkout(ShoppingCart cart) {
Optional<Payment>payment = creditCard.mkPayment(cart,getTotalCost());
//return payment.isPresent() ? Optional.of(new Order(this,cart,payment.get()) : Optional.empty());
return payment.map(value->new Order(this,cart,value));
}

@Override
public String toString() {
return "Customer{" + "name='" + name + '\'' + "credit Card = " + creditCard + '}';
}}

public class ShoppingCart {
private List<LineItem> lineItems = new ArrayList<>();
public void addLineItem(LineItem lineitem) {lineItems.add(lineItem); }

public int getTotalCost() {
return lineItems.stream().mapToInt(LineItem::getPrice)
   .sum()
}

@Override
public String toString() {
return "ShopppingCart{" + "lineItems" + lineItems + '}';
}}

public class LineItem {
private Product product:
private int quantity;

public LineItem(Product product,int quantity) {
this.product = product;
this.quantity = quantity;
}

public Product getProduct() {
return product;
}

public struing 

public int getPrice () {
return product.getPrice()* quantity;
}

public class Demo {
public static void main(String[] args) {
Product toothBrush = Catalogue.getProduct("toothbrush");
Product babyAlarm = Catalogue.getProduct("BabyAlarm")
ShoppingCart cart = new ShoppingCart();
cart.addLineItem(new LineItem(babyAlarm,1))
LineItem toothBrushes = new LineItem(toothbrush,2);
cart.addLineItem(toothbrushes);
System.out.println(cart.getTotalCost());
}}

Abstraction 

Hiding detail for a higher-level view 
Or defining things by their essential characteristics 
In software can define abstract objects

Encapsulation 

An implementation of abstarction

what is a lambda expression for?

public interface FileFilter {
boolean accept(File file);
}

Let's implement this interface 

public class JavaFileFilter implements FileFilter {
public boolean accept(File file) {
return file.getName().endsWith(".java");
}}

and use it:
JavaFileFilter fileFilter = new JavaFileFilter();
File dir = new File("d:/tmp");
File[] javaFiles = dir.listFiles(fileFilter);

Let's use an anonymous class

FileFilter fileFilter = new FileFilter() {
@Override 
public boolean accept(File file) {
return file.getName().endsWith(".java");
}
};

File dir = new File("d:/tmp");
File[] javaFiles = dir.listFiles(fileFilter);
for(File f: javaFiles) {
System.out.println(f)
}


what is lambda expression for?
A functional INTERFACE

To make instances of anonymous classes easier to write and read

java 8 lamda expression 

FileFilter filter = (File file) -> file.getName().endswith(".java");

so what is java 8 lambda expression?

another way of writing instances of anonymous classes

import java.io.File;
import java.io.FileFilter;


public static void main(String... args) throws InterruptedException
{
Runnable runnable = new Runnable() {
@Override 
public void run() {
for(int i=0;i<3;i++) {
System.out.println("hello world from thread [" + Thread.currentThread().getName() + "]");
}}};
Thread t= new Thread(runnable);
t.start();
t.join();
}}

Runnable runnable = () -> {
for(int i=0;i<3;i++) {
System.out.println("hello world from thread [" + Thread.currentThread().getName() + "]");
}
};
Thread t= new Thread(runnable);
t.start();
t.join();
}}

public static void main(String ... args) {
Comparator<String> comp = new Comparator<String>() {
@Override 
public int compare(String s1,String s2) {
return Integer.compare(s1.length(),s2.length());
}
};

List<String> list = Arrays.asList("***","**","*****","*");
Collections.sort(list,comp)
for(String s:list) {
System.out.println(s);
}
}
}

lambda expression

Comparator<String> comp = (String s1,String s2) -> Integer.compare(s1.length(),s2.length());
List<String> list = Arrays.asList("***","**","*****","*");
Collections.sort(list,comp)
for(String s:list) {
System.out.println(s);
}

what is the type of lambda expression?
A functional interface




is lambda expression is an object ?

Functional Interface 

A functional interface is an interface with only one abstract method

Example:
   public interface Runnable {
     run();
   };

public interface Comparator<T> {
int compare(T t1, T t2);
};

public interface FileFilter {
boolean accept(File pathname);
};


Functional Interface

A functional Interface can be annoted 

@FunctionalInterface 
public interface MyFunctionalInterface() {
 someMethod();

equals(Object o);

};

It just here for conveninence, the compiler can tell me whether the interface is functional or not

Can a lambda put in a variable?

Answer is yes!
Comparator<String> c = (String s1, String s2) -> Integer.compare(s1.length(),s2.length());

Consequences: a lambda can be taken as a method parameter, and can be retured by a method

is lambda expression is an object ?

the answer is complex, but no
exact answer: a lambda is an object without an identity


43 interfaces fall into four categories.
Supplier

@FunctionalInterface 
public interface Supplier<T> {
  T get();
} --> The supplier is just a single interface that doesn't take any object that provides a new object.


2)Consumer --> accepts an argument but doesn't return anything

@Functional Interface
public interface Consumer<T> {
void accept(T t) ;
}

@Functional Interface
public interface BiConsumer<T,U> {
void accept(T t,U u) ;
}

3)Predicate
@FunctionalInterface
public interface Predicate<T> {
boolean Test(T t) 
}

A predicate takes an object as a parameter and returns a boolean

@FunctionalInterface
public interface BiPredicate<T,U> {
boolean Test(T t,U u) 
}

Function/BiFunction  --> function accepts a object as a argument and returns another object

@FunctionalInterface
public interface Function<T,R> {
R apply(T t);
}

@FunctionalInterface
public interface Function<T,U,R> {
R apply(T t, U u);
}

@FunctionalInterface
public interface UnaryOperator<T> extends Function<T,T> {
}

Comparator<String> c = (String s1, String s2) -> Integer.compare(s1.length(),s2.length());

we no need to specify the types

Comparator<String> c = ( s1,  s2) -> Integer.compare(s1.length(),s2.length());

This lambda expression:
 Consumer<String> c = s->System.out.println(s);

Can be written like that:
 Consumer<String> c = System.out::println;

Method Refrences:

This lambda expression:
Comparator<Integer> c = (i1,i2) -> Integer.compare(i1,i2);

can be written like that

Comparator<Integer> c = Integer::compare;



















































